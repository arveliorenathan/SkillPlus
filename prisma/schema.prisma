generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id_user String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  fullName String?
  photo_url String?
  role Role @default(USER)
  createAt DateTime @default(now())

  //Relaition
  Enrollment Enrollment[]
  Orders Orders[]

  //Table Naming
  @@map("users")
}

model Orders {
  id_order String @id @default(uuid())
  id_user String
  id_course String
  status Status @default(PENDING)
  ammount Float
  created_at DateTime @default(now())

  //Relation
  user Users @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  course Course @relation(fields: [id_course], references: [id_course], onDelete: Cascade)

  //Table Naming
  @@map("orders")
}

model Enrollment {
  id_enrollment String @id @default(uuid())
  id_user String
  id_course String
  enroll_at DateTime @default(now())

  //Relation
  user Users @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  course Course @relation(fields: [id_course], references: [id_course], onDelete: Cascade)

  //Preventing Duplication
  @@unique([id_user, id_course])

  //Tabel Naming
  @@map("enrollment")
}

model Course {
  id_course String @id @default(uuid())
  title String
  description String
  price Int
  thumbnail String
  id_mentor String?
  createAt DateTime @default(now())

  //Relation
  Enrollment Enrollment[]
  Orders Orders[]
  Lesson Lesson[]
  mentor Mentor? @relation(fields: [id_mentor], references: [id_mentor], onDelete: SetNull)

  //Tabel Naming
  @@map("course")
}

model Lesson {
  id_lesson String @id @default(uuid())
  id_course String
  title String
  order Int
  createAt DateTime @default(now())

  //Relation
  Module Module[]
  course Course @relation(fields: [id_course], references: [id_course], onDelete: Cascade)

  //Table Naming
  @@map("lesson") // Fixed typo from "leeson"
}

model Module {
  id_module String @id @default(uuid())
  id_lesson String
  title String
  content String @db.Text
  video_url String?
  order Int
  createAt DateTime @default(now())

  //Relation
  lesson Lesson @relation(fields: [id_lesson], references: [id_lesson], onDelete: Cascade)

  //Table Naming
  @@map("module")
}

model Mentor {
  id_mentor String @id @default(uuid())
  name String
  photo_url String?
  company String? // Company where you work
  specialization String? // Skills, e.g., “Android Development, Kotlin”
  is_active Boolean @default(true) // Status active/nonactive
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //Relation
  Course Course[]

  //Table Naming
  @@map("mentor")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  CANCELED
  PENDING
  PAID
  FAILED
}